<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://antgui.github.io/</id>
    <title>WuQZ</title>
    <updated>2020-10-22T14:50:05.606Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://antgui.github.io/"/>
    <link rel="self" href="https://antgui.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://antgui.github.io/images/avatar.png</logo>
    <icon>https://antgui.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WuQZ</rights>
    <entry>
        <title type="html"><![CDATA[linux基础操作+终端科学上网]]></title>
        <id>https://antgui.github.io/post/linux-ji-chu-cao-zuo-zhong-duan-ke-xue-shang-wang/</id>
        <link href="https://antgui.github.io/post/linux-ji-chu-cao-zuo-zhong-duan-ke-xue-shang-wang/">
        </link>
        <updated>2020-10-22T13:42:38.000Z</updated>
        <content type="html"><![CDATA[<p>上网</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql简单基础和leetcode练习题]]></title>
        <id>https://antgui.github.io/post/mysql-jian-dan-ji-chu-he-leetcode-lian-xi-ti/</id>
        <link href="https://antgui.github.io/post/mysql-jian-dan-ji-chu-he-leetcode-lian-xi-ti/">
        </link>
        <updated>2020-10-22T13:41:55.000Z</updated>
        <content type="html"><![CDATA[<p>开始</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构  --使用c++语言描述]]></title>
        <id>https://antgui.github.io/post/shu-ju-jie-gou-shi-yong-cyu-yan-miao-shu/</id>
        <link href="https://antgui.github.io/post/shu-ju-jie-gou-shi-yong-cyu-yan-miao-shu/">
        </link>
        <updated>2020-10-22T12:02:53.000Z</updated>
        <content type="html"><![CDATA[<p>数据</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 做题 c++]]></title>
        <id>https://antgui.github.io/post/leetcode-zuo-ti-c/</id>
        <link href="https://antgui.github.io/post/leetcode-zuo-ti-c/">
        </link>
        <updated>2020-10-22T12:02:18.000Z</updated>
        <content type="html"><![CDATA[<p>一，简单题</p>
<p>1.两数之和<br>
<img src="https://antgui.github.io//post-images/1603372333141.png" alt="" loading="lazy"></p>
<p>第一种方法：暴力解法：O(n^2)   花费时间最多<br>
题目分析：题目给定一个整数数组和一个目标值，而这个目标值是这个整数数组其中两个元素的加和，并且同一个元素不能使用两次。我们可以通过选定数组的其中一个元素作为加和前一项，加和的后一项我们可以遍历除选定外的后面元素，假如等于目标值，则返回。最后我们将选定的前一相变为循环即可。<br>
<img src="https://antgui.github.io//post-images/1603373523977.png" alt="" loading="lazy"></p>
<p>第二种方法：哈希表法（hashmap）<br>
分析：我们可以通过创建哈希表，通过对应表（键值对）来进行查找，这个也是我们在现实工程使用最多，也是最吃经验的方法。（主要思想是边存边查，这样更快）</p>
<p>a.存完再找<br>
使用unordered_map<br>
<img src="https://antgui.github.io//post-images/1603378197180.png" alt="" loading="lazy"></p>
<p>b.边存边找</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ STL **  Vector ]]></title>
        <id>https://antgui.github.io/post/c-stl-vector/</id>
        <link href="https://antgui.github.io/post/c-stl-vector/">
        </link>
        <updated>2020-10-22T10:33:38.000Z</updated>
        <content type="html"><![CDATA[<p>一， vector 定义<br>
vector 即是向量，是一个动态的数组（顺序容器）。并且能够存放各种类型的对象（变量）。简单的说vector就是可以放置任意类型对象的动态数组。</p>
<p>二，特性<br>
就如定义所说。<br>
1.顺序列表<br>
2.动态数组<br>
3.动态分配</p>
<p>三，常用函数</p>
<pre><code>    1.vector();
    vector();  // 创建一个空vector
    vector(int nSize, const t&amp; t);  // 创建一个vector， 元素个数为nSize，且值均为t
    vector(const vector&amp;);  // 复制构筑函数
    vector(begin, end);  // 复制区间[begin, end)内另一个数组的元素到vector中

    2.void push_back(const T&amp; x);  // 向量尾部增加一个元素x

    3.iterator insert(iterator it, const T&amp; x);  // 向量中迭代器指向元素前增加一个元素
    iterator insert(iterator it, int n, const T&amp; x);  // 向量中迭代器指向元素前添加n个相同的元素x
    iterator insert(iterator it, const_iterator fist, const_iterator last);  // 往向量中迭代器指向的元素前插入另一个相同类型向量[first, last)间的数据。

    4.iterator erase(iterator it);  // 删除向量中迭代器指向的元素
    iterator erase(iterator first, iterator last);  // 删除向量中[first, last)中的元素

    5.void pop_back();  //删除向量中迭代器指向元素
    void clear();  // 清空向量中所以元素

    6.reference at(int pos);  // 返回pos位置元素的引用
    reference front();  // 返回首元素的引用
    reference back();  // 返回尾元素的引用
    iterator begin();  // 返回向量头指针，指向第一个元素
    iterator end();  // 返回向量尾指针，指向向量最后一个元素的下一个位置

    7.bool empty() const;  // 判断向量是否为空

    8.int size() const;  // 返回向量中元素的个数
    9.int capacity() const;  // 返回当前向量所能容纳的最大元素值
    10.int max_size() const;  // 返回最大可允许的vector元素的最值
    11.void swap(vector&amp;);  // 交换两个同类型向量的数据
    12.void assign(int n, const T&amp; x);  // 设置向量中第n个元素的值为x
    13.void assign(const_iterator first, const_iterator last);  // 向量中[firrst, last)中的元素设置成当前向量元素
</code></pre>
<p>四，使用范例</p>
<pre><code>    #include &lt;string.h&gt;
    #include &lt;vector&gt;
    #include &lt;iostream&gt;
    using namespace std;

    int main()
    {
        vector&lt;int&gt; obj;  // 创建一个int类型的向量容器
        for(int i=0;i&lt;10;i++)
        {
            obj.push_back(i);   // 往vector数组后面添加i数据
            cout&lt;&lt;obj[i]&lt;&lt;endl;
        }
        for(int i=0;i&lt;5;i++)
        {
            obj.pop_back();  // 删除最后一个元素
        }

        cout&lt;&lt;endl;

        for(int i = 0:i&lt;obj.size();i++)  // 遍历obj，并打印
        {
            cout&lt;&lt;obj[i]&lt;&lt;endl;
        }

        return 0;
    }
</code></pre>
<p>2.清除容器中的所以元素</p>
<pre><code>#include &lt;string.h&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
using namespace std;

int main()
{
	vector&lt;int&gt; obj;

	for (int i = 0;i &lt; 10;i++) // 添加
	{
		obj.push_back(i);
		cout &lt;&lt; obj[i] &lt;&lt; endl;
	}

	// clear()清除
	obj.clear();
	for (int i = 0;i &lt; obj.size();i++)
	{
		cout &lt;&lt; obj[i] &lt;&lt; endl;
	}

	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>